// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log.proto

package utils

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Log struct {
	Sessionid  string `protobuf:"bytes,1,opt,name=sessionid" json:"sessionid,omitempty"`
	Isview     int32  `protobuf:"varint,2,opt,name=isview" json:"isview,omitempty"`
	Isclick    int32  `protobuf:"varint,3,opt,name=isclick" json:"isclick,omitempty"`
	Userid     int64  `protobuf:"varint,4,opt,name=userid" json:"userid,omitempty"`
	Adid       int64  `protobuf:"varint,5,opt,name=adid" json:"adid,omitempty"`
	Creativeid int64  `protobuf:"varint,6,opt,name=creativeid" json:"creativeid,omitempty"`
	Companyid  int64  `protobuf:"varint,7,opt,name=companyid" json:"companyid,omitempty"`
	Productid  int64  `protobuf:"varint,8,opt,name=productid" json:"productid,omitempty"`
	// 1-30
	AdZoneId int32 `protobuf:"varint,9,opt,name=AdZoneId" json:"AdZoneId,omitempty"`
	// 31,32
	CTR       float32 `protobuf:"fixed32,10,opt,name=CTR" json:"CTR,omitempty"`
	HasTarget int32   `protobuf:"varint,11,opt,name=HasTarget" json:"HasTarget,omitempty"`
	// 33-37
	TerminalFeature int32 `protobuf:"varint,12,opt,name=TerminalFeature" json:"TerminalFeature,omitempty"`
	// 38,39
	AvgTopicInterestScore float32 `protobuf:"fixed32,13,opt,name=AvgTopicInterestScore" json:"AvgTopicInterestScore,omitempty"`
	MaxTopicInterestScore float32 `protobuf:"fixed32,14,opt,name=MaxTopicInterestScore" json:"MaxTopicInterestScore,omitempty"`
	// 40
	ShowNumFeature int32 `protobuf:"varint,15,opt,name=ShowNumFeature" json:"ShowNumFeature,omitempty"`
	// 41-64
	DisplayHours int32 `protobuf:"varint,16,opt,name=DisplayHours" json:"DisplayHours,omitempty"`
	// 65
	ClickFeature int32 `protobuf:"varint,17,opt,name=ClickFeature" json:"ClickFeature,omitempty"`
	// 66,67
	DayUserCrShow  int32 `protobuf:"varint,18,opt,name=DayUserCrShow" json:"DayUserCrShow,omitempty"`
	DayUserCrClick int32 `protobuf:"varint,19,opt,name=DayUserCrClick" json:"DayUserCrClick,omitempty"`
	// 68,69
	DayUserShow  int32 `protobuf:"varint,20,opt,name=DayUserShow" json:"DayUserShow,omitempty"`
	DayUserClick int32 `protobuf:"varint,21,opt,name=DayUserClick" json:"DayUserClick,omitempty"`
	// 70,71
	DayUserAdShow  int32 `protobuf:"varint,22,opt,name=DayUserAdShow" json:"DayUserAdShow,omitempty"`
	DayUserAdClick int32 `protobuf:"varint,23,opt,name=DayUserAdClick" json:"DayUserAdClick,omitempty"`
	// 72-90
	UserInterests int32 `protobuf:"varint,24,opt,name=UserInterests" json:"UserInterests,omitempty"`
	// 91-109 客户行业
	Industry int32 `protobuf:"varint,25,opt,name=Industry" json:"Industry,omitempty"`
	// 110 用户兴趣和客户行业的相似度
	UserIndustrySim float32 `protobuf:"fixed32,26,opt,name=UserIndustrySim" json:"UserIndustrySim,omitempty"`
	// answer 行业向量 111 -129
	AnsIndustry int32 `protobuf:"varint,27,opt,name=AnsIndustry" json:"AnsIndustry,omitempty"`
	// uid - adid 相似度 130
	UserAdidSim float32 `protobuf:"fixed32,28,opt,name=UserAdidSim" json:"UserAdidSim,omitempty"`
	// awid - adid 相似度 131
	AnsAdid float32 `protobuf:"fixed32,29,opt,name=AnsAdid" json:"AnsAdid,omitempty"`
	// clickIndustry 132
	ClickIndustry int32 `protobuf:"varint,30,opt,name=ClickIndustry" json:"ClickIndustry,omitempty"`
	// 周特征 133 - 140
	DisplayWeeks int32 `protobuf:"varint,31,opt,name=DisplayWeeks" json:"DisplayWeeks,omitempty"`
	// 模板特征 141-240
	TemplateFeature int32 `protobuf:"varint,32,opt,name=TemplateFeature" json:"TemplateFeature,omitempty"`
	// 241 - 248
	SimsMultiple []float32 `protobuf:"fixed32,33,rep,packed,name=SimsMultiple" json:"SimsMultiple,omitempty"`
	// 249
	RecallSim float32 `protobuf:"fixed32,34,opt,name=RecallSim" json:"RecallSim,omitempty"`
	// 250-252
	SimIsEmpty int32 `protobuf:"varint,35,opt,name=SimIsEmpty" json:"SimIsEmpty,omitempty"`
	// 253
	ClusterCtr float32 `protobuf:"fixed32,36,opt,name=ClusterCtr" json:"ClusterCtr,omitempty"`
	// 254-269
	UserVectorByAls []float32 `protobuf:"fixed32,37,rep,packed,name=UserVectorByAls" json:"UserVectorByAls,omitempty"`
	// 270
	UserVectorIsEmpty []float32 `protobuf:"fixed32,38,rep,packed,name=UserVectorIsEmpty" json:"UserVectorIsEmpty,omitempty"`
	// 271-273
	CreativeBrandSim int32 `protobuf:"varint,39,opt,name=CreativeBrandSim" json:"CreativeBrandSim,omitempty"`
	// 274
	NegativeKeyWordSim float32 `protobuf:"fixed32,40,opt,name=NegativeKeyWordSim" json:"NegativeKeyWordSim,omitempty"`
	// 275
	PostiveKeyWordSim float32 `protobuf:"fixed32,41,opt,name=PostiveKeyWordSim" json:"PostiveKeyWordSim,omitempty"`
	// 276
	NegativeUserAdTopicSim float32 `protobuf:"fixed32,42,opt,name=NegativeUserAdTopicSim" json:"NegativeUserAdTopicSim,omitempty"`
	// 277
	PostiveUserAdTopicSim float32 `protobuf:"fixed32,43,opt,name=PostiveUserAdTopicSim" json:"PostiveUserAdTopicSim,omitempty"`
	// 278
	Brushnum int32 `protobuf:"varint,44,opt,name=Brushnum" json:"Brushnum,omitempty"`
	// 279-282 ctr
	CtrPro []float32 `protobuf:"fixed32,45,rep,packed,name=CtrPro" json:"CtrPro,omitempty"`
	// 283-286
	ViewClickNum int32 `protobuf:"varint,46,opt,name=ViewClickNum" json:"ViewClickNum,omitempty"`
	// 287-294
	PageHomeType int32 `protobuf:"varint,47,opt,name=PageHomeType" json:"PageHomeType,omitempty"`
	// 295-363
	UserAdTagOneHotVector []int32  `protobuf:"varint,48,rep,packed,name=UserAdTagOneHotVector" json:"UserAdTagOneHotVector,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_log_c7729b539470b085, []int{0}
}
func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (dst *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(dst, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetSessionid() string {
	if m != nil {
		return m.Sessionid
	}
	return ""
}

func (m *Log) GetIsview() int32 {
	if m != nil {
		return m.Isview
	}
	return 0
}

func (m *Log) GetIsclick() int32 {
	if m != nil {
		return m.Isclick
	}
	return 0
}

func (m *Log) GetUserid() int64 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *Log) GetAdid() int64 {
	if m != nil {
		return m.Adid
	}
	return 0
}

func (m *Log) GetCreativeid() int64 {
	if m != nil {
		return m.Creativeid
	}
	return 0
}

func (m *Log) GetCompanyid() int64 {
	if m != nil {
		return m.Companyid
	}
	return 0
}

func (m *Log) GetProductid() int64 {
	if m != nil {
		return m.Productid
	}
	return 0
}

func (m *Log) GetAdZoneId() int32 {
	if m != nil {
		return m.AdZoneId
	}
	return 0
}

func (m *Log) GetCTR() float32 {
	if m != nil {
		return m.CTR
	}
	return 0
}

func (m *Log) GetHasTarget() int32 {
	if m != nil {
		return m.HasTarget
	}
	return 0
}

func (m *Log) GetTerminalFeature() int32 {
	if m != nil {
		return m.TerminalFeature
	}
	return 0
}

func (m *Log) GetAvgTopicInterestScore() float32 {
	if m != nil {
		return m.AvgTopicInterestScore
	}
	return 0
}

func (m *Log) GetMaxTopicInterestScore() float32 {
	if m != nil {
		return m.MaxTopicInterestScore
	}
	return 0
}

func (m *Log) GetShowNumFeature() int32 {
	if m != nil {
		return m.ShowNumFeature
	}
	return 0
}

func (m *Log) GetDisplayHours() int32 {
	if m != nil {
		return m.DisplayHours
	}
	return 0
}

func (m *Log) GetClickFeature() int32 {
	if m != nil {
		return m.ClickFeature
	}
	return 0
}

func (m *Log) GetDayUserCrShow() int32 {
	if m != nil {
		return m.DayUserCrShow
	}
	return 0
}

func (m *Log) GetDayUserCrClick() int32 {
	if m != nil {
		return m.DayUserCrClick
	}
	return 0
}

func (m *Log) GetDayUserShow() int32 {
	if m != nil {
		return m.DayUserShow
	}
	return 0
}

func (m *Log) GetDayUserClick() int32 {
	if m != nil {
		return m.DayUserClick
	}
	return 0
}

func (m *Log) GetDayUserAdShow() int32 {
	if m != nil {
		return m.DayUserAdShow
	}
	return 0
}

func (m *Log) GetDayUserAdClick() int32 {
	if m != nil {
		return m.DayUserAdClick
	}
	return 0
}

func (m *Log) GetUserInterests() int32 {
	if m != nil {
		return m.UserInterests
	}
	return 0
}

func (m *Log) GetIndustry() int32 {
	if m != nil {
		return m.Industry
	}
	return 0
}

func (m *Log) GetUserIndustrySim() float32 {
	if m != nil {
		return m.UserIndustrySim
	}
	return 0
}

func (m *Log) GetAnsIndustry() int32 {
	if m != nil {
		return m.AnsIndustry
	}
	return 0
}

func (m *Log) GetUserAdidSim() float32 {
	if m != nil {
		return m.UserAdidSim
	}
	return 0
}

func (m *Log) GetAnsAdid() float32 {
	if m != nil {
		return m.AnsAdid
	}
	return 0
}

func (m *Log) GetClickIndustry() int32 {
	if m != nil {
		return m.ClickIndustry
	}
	return 0
}

func (m *Log) GetDisplayWeeks() int32 {
	if m != nil {
		return m.DisplayWeeks
	}
	return 0
}

func (m *Log) GetTemplateFeature() int32 {
	if m != nil {
		return m.TemplateFeature
	}
	return 0
}

func (m *Log) GetSimsMultiple() []float32 {
	if m != nil {
		return m.SimsMultiple
	}
	return nil
}

func (m *Log) GetRecallSim() float32 {
	if m != nil {
		return m.RecallSim
	}
	return 0
}

func (m *Log) GetSimIsEmpty() int32 {
	if m != nil {
		return m.SimIsEmpty
	}
	return 0
}

func (m *Log) GetClusterCtr() float32 {
	if m != nil {
		return m.ClusterCtr
	}
	return 0
}

func (m *Log) GetUserVectorByAls() []float32 {
	if m != nil {
		return m.UserVectorByAls
	}
	return nil
}

func (m *Log) GetUserVectorIsEmpty() []float32 {
	if m != nil {
		return m.UserVectorIsEmpty
	}
	return nil
}

func (m *Log) GetCreativeBrandSim() int32 {
	if m != nil {
		return m.CreativeBrandSim
	}
	return 0
}

func (m *Log) GetNegativeKeyWordSim() float32 {
	if m != nil {
		return m.NegativeKeyWordSim
	}
	return 0
}

func (m *Log) GetPostiveKeyWordSim() float32 {
	if m != nil {
		return m.PostiveKeyWordSim
	}
	return 0
}

func (m *Log) GetNegativeUserAdTopicSim() float32 {
	if m != nil {
		return m.NegativeUserAdTopicSim
	}
	return 0
}

func (m *Log) GetPostiveUserAdTopicSim() float32 {
	if m != nil {
		return m.PostiveUserAdTopicSim
	}
	return 0
}

func (m *Log) GetBrushnum() int32 {
	if m != nil {
		return m.Brushnum
	}
	return 0
}

func (m *Log) GetCtrPro() []float32 {
	if m != nil {
		return m.CtrPro
	}
	return nil
}

func (m *Log) GetViewClickNum() int32 {
	if m != nil {
		return m.ViewClickNum
	}
	return 0
}

func (m *Log) GetPageHomeType() int32 {
	if m != nil {
		return m.PageHomeType
	}
	return 0
}

func (m *Log) GetUserAdTagOneHotVector() []int32 {
	if m != nil {
		return m.UserAdTagOneHotVector
	}
	return nil
}

func init() {
	proto.RegisterType((*Log)(nil), "utils.Log")
}

func init() { proto.RegisterFile("log.proto", fileDescriptor_log_c7729b539470b085) }

var fileDescriptor_log_c7729b539470b085 = []byte{
	// 754 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x95, 0xef, 0x53, 0xf3, 0x44,
	0x10, 0xc7, 0xa7, 0xf4, 0x29, 0x0f, 0x3d, 0x7e, 0x9f, 0x82, 0x2b, 0x22, 0x46, 0x44, 0x8c, 0x88,
	0xe8, 0x8c, 0x8e, 0xef, 0x4b, 0xd1, 0x69, 0x47, 0x41, 0x26, 0xad, 0x30, 0xe3, 0xbb, 0x98, 0xdc,
	0x94, 0x1b, 0x92, 0x5c, 0xe6, 0xee, 0x02, 0xe6, 0xef, 0xf4, 0x1f, 0x72, 0x76, 0x2f, 0x69, 0x93,
	0xd2, 0xe7, 0x5d, 0xf7, 0xb3, 0xbb, 0xdf, 0xfb, 0xde, 0xdd, 0xe6, 0xca, 0xfa, 0x89, 0x9a, 0x5d,
	0xe5, 0x5a, 0x59, 0xc5, 0x7b, 0x85, 0x95, 0x89, 0x39, 0xfd, 0x6f, 0x9b, 0x75, 0xff, 0x50, 0x33,
	0x7e, 0xcc, 0xfa, 0x46, 0x18, 0x23, 0x55, 0x26, 0x63, 0xe8, 0x78, 0x1d, 0xbf, 0x1f, 0x2c, 0x00,
	0x3f, 0x64, 0xeb, 0xd2, 0xbc, 0x48, 0xf1, 0x0a, 0x6b, 0x5e, 0xc7, 0xef, 0x05, 0x55, 0xc4, 0x81,
	0xbd, 0x97, 0x26, 0x4a, 0x64, 0xf4, 0x0c, 0x5d, 0x4a, 0xd4, 0x21, 0x76, 0x14, 0x46, 0x68, 0x19,
	0xc3, 0x3b, 0xaf, 0xe3, 0x77, 0x83, 0x2a, 0xe2, 0x9c, 0xbd, 0x0b, 0x63, 0x19, 0x43, 0x8f, 0x28,
	0xfd, 0xe6, 0x27, 0x8c, 0x45, 0x5a, 0x84, 0x56, 0xbe, 0x08, 0x19, 0xc3, 0x3a, 0x65, 0x1a, 0x04,
	0xbd, 0x45, 0x2a, 0xcd, 0xc3, 0xac, 0x94, 0x31, 0xbc, 0xa7, 0xf4, 0x02, 0x60, 0x36, 0xd7, 0x2a,
	0x2e, 0x22, 0x2b, 0x63, 0xd8, 0x70, 0xd9, 0x39, 0xe0, 0x47, 0x6c, 0x63, 0x10, 0xff, 0xad, 0x32,
	0x31, 0x8e, 0xa1, 0x4f, 0x16, 0xe7, 0x31, 0xdf, 0x63, 0xdd, 0xe1, 0x34, 0x00, 0xe6, 0x75, 0xfc,
	0xb5, 0x00, 0x7f, 0xa2, 0xd6, 0x28, 0x34, 0xd3, 0x50, 0xcf, 0x84, 0x85, 0x4d, 0x2a, 0x5f, 0x00,
	0xee, 0xb3, 0xdd, 0xa9, 0xd0, 0xa9, 0xcc, 0xc2, 0xe4, 0x37, 0x11, 0xda, 0x42, 0x0b, 0xd8, 0xa2,
	0x9a, 0x65, 0xcc, 0x7f, 0x66, 0x07, 0x83, 0x97, 0xd9, 0x54, 0xe5, 0x32, 0x1a, 0x67, 0x56, 0x68,
	0x61, 0xec, 0x24, 0x52, 0x5a, 0xc0, 0x36, 0xad, 0xb5, 0x3a, 0x89, 0x5d, 0xb7, 0xe1, 0xbf, 0x2b,
	0xba, 0x76, 0x5c, 0xd7, 0xca, 0x24, 0x3f, 0x67, 0x3b, 0x93, 0x27, 0xf5, 0x7a, 0x57, 0xa4, 0xb5,
	0xa9, 0x5d, 0x32, 0xb5, 0x44, 0xf9, 0x29, 0xdb, 0xba, 0x91, 0x26, 0x4f, 0xc2, 0x72, 0xa4, 0x0a,
	0x6d, 0x60, 0x8f, 0xaa, 0x5a, 0x0c, 0x6b, 0x86, 0x78, 0x7d, 0xb5, 0xd2, 0xbe, 0xab, 0x69, 0x32,
	0x7e, 0xc6, 0xb6, 0x6f, 0xc2, 0xf2, 0x2f, 0x23, 0xf4, 0x50, 0xe3, 0x12, 0xc0, 0xa9, 0xa8, 0x0d,
	0xd1, 0xd5, 0x1c, 0x50, 0x3b, 0x7c, 0xe4, 0x5c, 0xb5, 0x29, 0xf7, 0xd8, 0x66, 0x45, 0x48, 0xeb,
	0x63, 0x2a, 0x6a, 0x22, 0xf2, 0x5d, 0xf5, 0x90, 0xce, 0x41, 0xe5, 0xbb, 0xc1, 0x1a, 0x9e, 0x06,
	0x31, 0xe9, 0x1c, 0xb6, 0x3c, 0x39, 0xd8, 0xf0, 0x34, 0x88, 0x9d, 0xd6, 0x27, 0x2d, 0x4f, 0x15,
	0x45, 0x35, 0x0c, 0xeb, 0x63, 0x36, 0x00, 0x4e, 0xad, 0x05, 0x71, 0xb2, 0xc6, 0x59, 0x5c, 0x18,
	0xab, 0x4b, 0xf8, 0xd4, 0x4d, 0x56, 0x1d, 0xe3, 0xa4, 0xb8, 0x62, 0x17, 0x4f, 0x64, 0x0a, 0x47,
	0x74, 0x87, 0xcb, 0x18, 0xf7, 0x3f, 0xc8, 0xcc, 0x5c, 0xe8, 0x33, 0xb7, 0xff, 0x06, 0xc2, 0x0a,
	0x67, 0x4e, 0xc6, 0xa8, 0x73, 0x4c, 0x3a, 0x4d, 0x84, 0x5f, 0xe1, 0x20, 0x33, 0x18, 0xc1, 0xe7,
	0x94, 0xad, 0x43, 0xdc, 0x09, 0x6d, 0x69, 0xae, 0x7f, 0xe2, 0x76, 0xd2, 0x82, 0x8d, 0xc9, 0x78,
	0x14, 0xe2, 0xd9, 0xc0, 0x17, 0xad, 0xc9, 0x20, 0xe6, 0x66, 0x3f, 0xcd, 0x93, 0xd0, 0x8a, 0x7a,
	0x38, 0xbc, 0x7a, 0xf6, 0x5b, 0x18, 0xd5, 0x26, 0x32, 0x35, 0xb7, 0x45, 0x62, 0x65, 0x9e, 0x08,
	0xf8, 0xd2, 0xeb, 0xfa, 0x6b, 0x41, 0x8b, 0xe1, 0x77, 0x16, 0x88, 0x28, 0x4c, 0x12, 0xdc, 0xd1,
	0x29, 0x79, 0x5e, 0x00, 0x7c, 0x0f, 0x26, 0x32, 0x1d, 0x9b, 0x5f, 0xd3, 0xdc, 0x96, 0xf0, 0x15,
	0x2d, 0xd3, 0x20, 0x98, 0x1f, 0x26, 0x85, 0xb1, 0x42, 0x0f, 0xad, 0x86, 0x33, 0x6a, 0x6f, 0x90,
	0xfa, 0xf4, 0x1f, 0x44, 0x64, 0x95, 0xbe, 0x2e, 0x07, 0x89, 0x81, 0xaf, 0xc9, 0xc4, 0x32, 0xe6,
	0x97, 0x6c, 0x7f, 0x81, 0xea, 0x05, 0xcf, 0xa9, 0xf6, 0x6d, 0x82, 0x5f, 0xb0, 0xbd, 0x61, 0xf5,
	0x2a, 0x5d, 0xeb, 0x30, 0xa3, 0xeb, 0xf8, 0x86, 0xdc, 0xbd, 0xe1, 0xfc, 0x8a, 0xf1, 0x3b, 0x31,
	0x23, 0xf6, 0xbb, 0x28, 0x1f, 0x95, 0xa6, 0x6a, 0x9f, 0xbc, 0xae, 0xc8, 0xa0, 0x93, 0x7b, 0x65,
	0x96, 0xca, 0xbf, 0xa5, 0xf2, 0xb7, 0x09, 0xfe, 0x0b, 0x3b, 0xac, 0x35, 0xdc, 0x20, 0xd0, 0xbb,
	0x80, 0x2d, 0x17, 0xd4, 0xf2, 0x81, 0x2c, 0xbe, 0x30, 0x95, 0xd8, 0x52, 0xdb, 0x77, 0xee, 0x85,
	0x59, 0x99, 0xc4, 0x49, 0xbf, 0xd6, 0x85, 0x79, 0xca, 0x8a, 0x14, 0x2e, 0xdd, 0xa4, 0xd7, 0x31,
	0xbe, 0xf3, 0x43, 0xab, 0xef, 0xb5, 0x82, 0xef, 0xe9, 0xd8, 0xaa, 0x08, 0xa7, 0xe0, 0x41, 0x8a,
	0x57, 0x1a, 0xb4, 0xbb, 0x22, 0x85, 0x2b, 0x37, 0x53, 0x4d, 0x86, 0x35, 0xf7, 0xe1, 0x4c, 0x8c,
	0x54, 0x2a, 0xa6, 0x65, 0x2e, 0xe0, 0x07, 0x57, 0xd3, 0x64, 0xe8, 0xb8, 0x72, 0x13, 0xce, 0xfe,
	0xcc, 0xc4, 0x48, 0x59, 0x77, 0x27, 0xf0, 0xa3, 0xd7, 0xf5, 0x7b, 0xc1, 0xea, 0xe4, 0x3f, 0xeb,
	0xf4, 0x1f, 0xf7, 0xd3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x50, 0x0f, 0x22, 0xbc, 0xf0, 0x06,
	0x00, 0x00,
}
